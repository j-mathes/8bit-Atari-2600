;-------------------------------------------------------------
; Chapter 18 - Scoreboard - Online
;	
; 	Basic scoreboard example
;
;-------------------------------------------------------------
	
        processor 6502
        
        include "vcs.h"
        include "macro.h"
        include "xmacro.h"	; timer macros

;-----------------------------------------------------------------        
; Variables SEGment
        seg.u Variables		; set Variables SEGment (uninitialized)
	org $80			; start Variables at $80

;-----------------------------------------------------------------        
; Declare variables

Score0	.byte			; BCD score of player 0
Score1	.byte			; BCD score of player 1
FontBuf	.ds 10			; Define Storage - 2x5 array of playfield bytes
Temp	.byte			; temporary

;-----------------------------------------------------------------        
; Code SEGment

	seg Code        	; set Code SEGment
        org $f000		; start Code at $f000
        
Start
	CLEAN_START		; macro to safely clear memroy and TIA
        lda #$01		; LoaD BCD number -> A
        sta Score0		; STore A -> Score 0
        lda #$01		; LoaD BCD number -> A
        sta Score1		; STore A -> Score 1

NextFrame
;-----------------------------------------------------------------        
; Vertical Sync - 3 lines
	VERTICAL_SYNC		; macro gives us 3 lines of VSYNC
        
;-----------------------------------------------------------------        
; Vertical Blank - 37 lines
        TIMER_SETUP 37		; macro counts X scanlines
	
	lda Score0		; LoaD Score0 -> A
        ldx #0			; LoaD #0 -> X
	jsr GetBCDBitmap	; Jump to SubRoutine GetBCDBitmap
	lda Score1		; LoaD Score1 -> A
        ldx #5			; Load #5 -> X
	jsr GetBCDBitmap	; Jump to SubRoutine GetBCDBitmap

;-----------------------------------------------------------------        
; Wait for end of VBLANK
        TIMER_WAIT		; macro waits for timer to complete
	
        TIMER_SETUP 192

;-----------------------------------------------------------------        
; Main Body - Draw 192 scanlines
;
; First, we'll draw the scoreboard.
; Put the playfield into score mode (bit 2) which gives
; two different colors for the left/right side of
; the playfield (given by COLUP0 and COLUP1).
        lda #%00010010	; score mode + 2 pixel ball
        sta CTRLPF	; STore A -> CTRLPF
        lda #$48	; LoaD #$48 -> A
        sta COLUP0	; STore A -> COLUP0 - set color for left
        lda #$a8	; LoaD #$a8 -> A
        sta COLUP1	; STore A -> COLUP1 - set color for right
        
;----------------------------------------------------------------- 
; Now we draw all four digits.
	ldy #0		; LoaD #0 -> Y - Y will contain the frame Y coordinate
ScanLoop1a
	sta WSYNC	; STore A -> WSYNC
        tya		; Transfer Y -> A
        lsr		; Logical Shift Right -> A - divide Y by two for double-height lines
        tax		; Transfer A -> X
        lda FontBuf+0,x	; LoaD (memory at FontBuf+0,x) -> A
        sta PF1		; STore A -> PF1 - set left score bitmap
        SLEEP 28	; Sleep for 28 cycles to separate Score0 from Score1
        lda FontBuf+5,x ; Load (memory at FontBuf+5,x) -> A
        sta PF1		; STore A -> PF1 - set right score bitmap
        iny		; INcrement Y
        cpy #10		; ComPare Y register <-> #10
        bcc ScanLoop1a	; Branch if Carry Clear -> ScanLoop1a

;----------------------------------------------------------------- 
; Clear the playfield
        lda #0		; LoaD #0 -> A
	sta WSYNC	; STore A -> WSYNC
        sta PF1		; STore A -> PF1

;----------------------------------------------------------------- 
; Turn playfield reflection off, since our brick field
; will be drawn asymetrically (and turn score mode off)
        lda #%00010100	; no reflection + ball priority + 2 pixel ball
        sta CTRLPF	; STore A -> CTRLPF

;-----------------------------------------------------------------
; Set up overscan timer
; Overscan 30 lines
        TIMER_WAIT
	TIMER_SETUP 30
        TIMER_WAIT
        jmp NextFrame	; JuMP to NextFrame

;-----------------------------------------------------------------
; Fetches bitmap data for two digits of a
; BCD-encoded number, storing it in addresses
; FontBuf+x to FontBuf+4+x.
GetBCDBitmap subroutine
; First fetch the bytes for the 1st digit
	pha		; PusH A -> Stack - save original BCD number
        and #$0F	; logical AND - mask out the least significant digit
        sta Temp	; STore A -> Temp
        asl		; Arithmetic Shift Left
        asl		; Arithmetic Shift Left
        adc Temp	; ADd with Carry A -> Temp - multiply by 5
        tay		; Transfer A -> Y
        lda #5		; LoaD #5 -> A
        sta Temp	; STore A -> Temp - count down from 5
.loop1
        lda DigitsBitmap,y
        and #$0F	; mask out leftmost digit
        sta FontBuf,x	; store leftmost digit
        iny
        inx
        dec Temp
        bne .loop1
; Now do the 2nd digit
        pla		; Pull A <- Stack - restore original BCD number
        lsr
        lsr
        lsr
        lsr		; shift right by 4 (in BCD, divide by 10)
        sta Temp
        asl
        asl
        adc Temp	; multiply by 5
        tay		; -> Y
        dex
        dex
        dex
        dex
        dex		; subtract 5 from X (reset to original)
        lda #5
        sta Temp	; count down from 5
.loop2
        lda DigitsBitmap,y
        and #$F0	; mask out leftmost digit
        ora FontBuf,x	; combine left and right digits
        sta FontBuf,x	; store combined digits
        iny
        inx
        dec Temp
        bne .loop2
	rts

	org $FF00

; Bitmap pattern for digits
DigitsBitmap ;;{w:8,h:6,count:10,brev:1};;
        .byte $EE,$AA,$AA,$AA,$EE,$00
        .byte $22,$22,$22,$22,$22,$00
        .byte $EE,$22,$EE,$88,$EE,$00
        .byte $EE,$22,$66,$22,$EE,$00
        .byte $AA,$AA,$EE,$22,$22,$00
        .byte $EE,$88,$EE,$22,$EE,$00
        .byte $EE,$88,$EE,$AA,$EE,$00
        .byte $EE,$22,$22,$22,$22,$00
        .byte $EE,$AA,$EE,$AA,$EE,$00
        .byte $EE,$AA,$EE,$22,$EE,$00
        
; Epilogue
	org $fffc
        .word Start
        .word Start
