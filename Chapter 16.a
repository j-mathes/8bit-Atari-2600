;-------------------------------------------------------------
; Chapter 16 - A Complex Scene, Part 2 - Online
;
; 	Complex playfield with two sprites
;
;-------------------------------------------------------------
	
        processor 6502
        
        include "vcs.h"
        include "macro.h"
        include "xmacro.h"	; timer macros

;-----------------------------------------------------------------        
; Variables SEGment
        seg.u Variables		; set Variables SEGment (uninitialized)
	org $80			; start Variables at $80

;-----------------------------------------------------------------        
; Declare variables

PFPtr		.word		; pointer to playfield data
PFIndex		.byte		; offset into playfield array
PFCount 	.byte		; lines left in this playfield segment
YPos0		.byte		; Y position of player 0 sprite
XPos0		.byte		; X position of player 0 sprite
YPos1		.byte		; Y position of player 1 sprite
XPos1		.byte		; X position of player 1 sprite

;-----------------------------------------------------------------
; Pointers to bitmap and color tables

SpritePtr0	.word		; pointer to sprite 0 bitmap table
ColorPtr0	.word		; pointer to sprite 0 color table
SpritePtr1	.word		; pointer to sprite 1 bitmap table
ColorPtr1	.word		; pointer to sprite 1 color table

;-----------------------------------------------------------------
; Temporary values for kernel

YP0		.byte		; Y counter for player 0
YP1		.byte		; Y counter for player 1
Temp		.byte		; temporary
Bitp0		.byte		; bitmap for player 0
Bitp1		.byte		; bitmap for player 1
Colp0		.byte		; color for player 0
Colp1		.byte		; color for player 1
tmpPF0		.byte		; temp playfield 0
tmpPF1		.byte		; temp playfield 1
tmpPF2		.byte		; temp playfield 2

SpriteHeight	.equ 16		; EQUate 16 with SpriteHeight

;-----------------------------------------------------------------        
; Code SEGment

	seg Code        	; set Code SEGment
        org $f000		; start Code at $f000
        
Start
	CLEAN_START		; macro to safely clear memroy and TIA
	
;-----------------------------------------------------------------        
; Set up initial pointers and player position.
; Rather than specifying specific playfile data in a lookup table
; we are using the bits located at the Data0 label to make some
; random background noise

Data0        
        lda #<Data0		; LoaD lo byte address of Data0 -> A 
        sta PFPtr		; STore A -> lo byte of playfield pointer
        lda #>Data0		; LoaD hi byte address of Data0 -> A 
        sta PFPtr+1		; STore A -> hi byte of playfield pointer 
        lda #<Frame0		; LoaD lo byte address of Frame0 -> A
        sta SpritePtr0		; STore A -> lo byte of sprite 0 pointer
        lda #>Frame0		; LoaD hi byte address of Frame0 -> A
        sta SpritePtr0+1	; STore A -> hi byte of sprite 0 pointer
        lda #<ColorFrame0	; LoaD lo byte address of ColorFrame0 -> A
        sta ColorPtr0		; STore A -> lo byte of sprite 0 color pointer
        lda #>ColorFrame0	; LoaD hi byte address of ColorFrame0 -> A
        sta ColorPtr0+1		; STore A -> hi byte of sprite 0 color pointer
        
        			; reuse data from Frame0 for sprite 1
        lda #<Frame0		; LoaD lo byte address of Frame0 -> A
        sta SpritePtr1		; STore A -> lo byte of sprite 0 pointer
        lda #>Frame0		; LoaD hi byte address of Frame0 -> A
        sta SpritePtr1+1	; STore A -> hi byte of sprite 0 pointer
        lda #<ColorFrame0	; LoaD lo byte address of ColorFrame0 -> A
        sta ColorPtr1		; STore A -> lo byte of sprite 0 color pointer
        lda #>ColorFrame0	; LoaD hi byte address of ColorFrame0 -> A
        sta ColorPtr1+1		; STore A -> hi byte of sprite 0 color pointer
        lda #242		; LoaD y0 starting position (#242) -> A
        sta YPos0		; STore A -> YPos0
        lda #200		; LoaD y1 starting position (#200) -> A
        sta YPos1		; STore A -> YPos1
        lda #38			; LoaD x(0 and 1) starting position (#38) -> A
        sta XPos0		; STore A -> XPos0
        sta XPos1		; STore A -> XPos1
        lda #1			; LoaD #1 -> A
        sta VDELP0		; updates to GRP0 will be delayed (Vertical DELay Player 0) 

NextFrame
;-----------------------------------------------------------------        
; Vertical Sync - 3 lines
	VERTICAL_SYNC		; macro gives us 3 lines of VSYNC
        
;-----------------------------------------------------------------        
; Vertical Blank - 37 lines
        TIMER_SETUP 37		; macro counts X scanlines
	
	lda #$88		; LoaD hex $88 -> A - light blue
        sta COLUBK		; STore A -> COLUBK - background playfield color
        lda #$5b		; LoaD hex $5b -> A - pink
        sta COLUPF		; STore A -> COLUPF - foreground playfield color
        lda #$68		; LoaD hex $68 -> A
        sta COLUP0		; STore A -> COLUP0 - player 0 color
        lda #1			; LoaD #1 (flag to turn mirroring on) -> A
        sta CTRLPF		; STore A -> CTRLPF - Playfield mirroring (bit D0 -> 0==normal, 1==mirrored)
        lda #72			; LoaD #72 -> A
        sta PFIndex		; STore A -> PFIndex - reset playfield offset
        
;-----------------------------------------------------------------        
; Set temporary Y counter and set horizontal position
        lda YPos0		; LoaD YPos0 -> A
        sta YP0			; STore A -> YP0 = temporary counter
        lda YPos1		; LoaD YPos1 -> A
        sta YP1			; STore A -> YP1 = temporary counter
        lda XPos0		; LoaD XPos0 -> A
        ldx #0			; LoaD #0 -> X
        jsr SetHorizPos		; Jump to SubRoutine SetHorizPos for Player 0
        lda XPos1		; LoaD XPos1 -> A
        ldx #1			; LoaD #1 -> X
        jsr SetHorizPos		; Jump to SubRoutine SetHorizPos for Player 1
        sta WSYNC		; STore A -> WSYNC
        sta HMOVE		; STore A -> HMOVE - need to apply HMOVE
        
;-----------------------------------------------------------------        
; Wait for end of VBLANK
        TIMER_WAIT		; macro waits for timer to complete

        sta WSYNC		; STore A -> WSYNC
        lda #0
        sta VBLANK		; STore A -> VBLANK
        SLEEP 31		; so timing analysis works out

;-----------------------------------------------------------------        
; Main Body - 192 lines

KernelLoop 
;----------------------------------------------------------------- 
; Phase 0: Fetch PF0 byte
        jsr DrawSprites		; Jump to SubRoutine DrawSprites
	ldy PFIndex		; LoaD PFIndex -> Y - no more playfield?
        beq NoMoreLines		; Branch  if Z == NoMoreLines - exit loop
        dey			; DEcrement Y
        lda (PFPtr),y		; LoaD PFPtr + Y -> A (contents from address PFPtr + y, ie, PF0)
        sty PFIndex		; STore Y -> PFIndex
        sta tmpPF0		; STore A -> tmpPF0
        
; Phase 1: Fetch PF1 byte
        jsr DrawSprites		; Jump to SubRoutine DrawSprites
	ldy PFIndex		; LoaD PFIndex -> Y - no more playfield?
        dey			; DEcrement Y
        lda (PFPtr),y		; LoaD PFPtr + Y -> A (contents from address PFPtr + y, ie, PF1)
        sty PFIndex		; STore Y -> PFIndex
        sta tmpPF1		; STore A -> tmpPF1
        
; Phase 2: Fetch PF2 byte
        jsr DrawSprites		; Jump to SubRoutine DrawSprites
	ldy PFIndex		; LoaD PFIndex -> Y - no more playfield?
        dey			; DEcrement Y
        lda (PFPtr),y		; LoaD PFPtr + Y -> A (contents from address PFPtr + y, ie, PF2)
        sty PFIndex		; STore Y -> PFIndex
        sta tmpPF2		; STore A -> tmpPF2
        
; Phase 3: Write PF0/PF1/PF2 registers
        jsr DrawSprites		; Jump to SubRoutine DrawSprites
	lda tmpPF0		; LoaD tmpPF0 -> A
        sta PF0			; STore A -> PF0
        lda tmpPF1		; LoaD tmpPF1 -> A
        sta PF1			; STore A -> PF1
        lda tmpPF2		; LoaD tmpPF2 -> A
        sta PF2			; STore A -> PF2
        
; Go to next scanline
	jmp KernelLoop		; JuMP to KernelLoop

NoMoreLines
;-----------------------------------------------------------------
; Set up overscan timer
; Overscan 30 lines
	TIMER_SETUP 30		; Timer setup macro
	lda #2			; LoaD #2 -> A
        sta VBLANK		; STore A -> VBlank
        jsr MoveJoystick	; Jump to SubRoutine MoveJoystick
        TIMER_WAIT		; Timer wait macro
        jmp NextFrame		; JuMP to NextFrame label

;----------------------------------------------------------------- 
; DrawSprite subroutine called by kernel

DrawSprites
;----------------------------------------------------------------- 
; Fetch sprite 0 values
        lda #SpriteHeight	; height in 2xlines
        sec			; SEt Carry flag
        isb YP0			; INC yp0, then SBC yp0
        bcs DoDraw0		; Branch if Carry Set (until negative) - inside bounds?
        lda #0			; LoaD #0 -> A - if no, load the padding offset (0)
DoDraw0

        tay			; Transfer A -> Y
        lda (ColorPtr0),y	; LoaD color for both lines -> A (contents from address ColorPtr0 + y)
        sta Colp0		; STore A -> colp0
	lda (SpritePtr0),y	; LoaD bitmap for first line -> A (contents from address SpritePtr0 + y)
        sta GRP0		; STore A -> [GRP0] (delayed due to VDEL)
        
;-----------------------------------------------------------------
; Fetch sprite 1 values
        lda #SpriteHeight	; height in 2xlines
        sec			; SEt Carry flag
        isb YP1			; INC yp0, then SBC yp0
        bcs DoDraw1		; Branch if Carry Set (until negative) - inside bounds?
        lda #0			; LoaD #0 -> A - if no, load the padding offset (0)
DoDraw1
        tay			; Transfer A -> Y
        lda (ColorPtr1),y	; LoaD color for both lines -> A (contents from address ColorPtr1 + y)
        tax			; Transfer A -> X
	lda (SpritePtr1),y	; LoaD bitmap for first line -> A (contents from address SpritePtr1 + y)
        tay			; Transfer A -> Y
        
;-----------------------------------------------------------------
; WSYNC and store sprite values
        lda Colp0		; LoaD Colp0 -> A
	sta WSYNC		; STore A -> WSYNC
        sty GRP1		; STore Y -> GRP1 - GRP0 is also updated due to VDELP0 flag
        stx COLUP1		; STore X -> COLUP1
        sta COLUP0		; STore A -> COLUP0
	rts			; ReTurn Subroutine (return to caller)

SetHorizPos
	sta WSYNC		; start a new line
        bit 0			; waste 3 cycles (logical AND between 0 and Accum)
	sec			; set carry flag
DivideLoop
	sbc #15			; SuBtract with Carry 15
	bcs DivideLoop		; Branch if Carry Set (until negative)
	eor #7			; Exclusive OR A <-> #7 (calculate fine offset)
	asl			; Arithmetic Shift Left A(Accum)
	asl			; Arithmetic Shift Left A(Accum)
	asl			; Arithmetic Shift Left A(Accum)
	asl			; Arithmetic Shift Left A(Accum)
	sta RESP0,x		; STore A -> RESP0 + X (Afix coarse position)
	sta HMP0,x		; STore A -> HMPO + X (set fine offset)
	rts			; ReTurn from Subroutine (return to caller)

;-----------------------------------------------------------------        
; Read joystick movement and apply to object 0
MoveJoystick

;-----------------------------------------------------------------        
; Move vertically
; 
; It appears that the Y extents are between 175 and 254
; ***up and down are actually reversed since ypos starts at bottom 
	ldx YPos0		; LoaD YPo0s -> X
				; #%nnnn0000 binary bit mask for Player 0 Joystick
	lda #%00100000		; LoaD bitmask -> A (***Up?)
	bit SWCHA		; BIt Test Target <-> A (logical AND between target and Accum)
        			; and sets Z flag to 1 if the bits are equal
	bne SkipMoveUp		; Branch if Z flag is Not Equal to 1
        cpx #175		; ComPare X -> #175 ("bottom" extent)
        bcc SkipMoveUp		; Branch if Carry Clear
        dex			; DEcrement X
SkipMoveUp
	lda #%00010000		; LoaD bitmask -> A (***Down?)
	bit SWCHA 		; BIt Test Target <-> A (logical AND between target and Accum)
	bne SkipMoveDown	; Branch if Z flag is Not Equal to 1
        cpx #254		; ComPare X -> #254 ("top" extent)
        bcs SkipMoveDown	; Branch if Carry Set
        inx			; INcrement X
SkipMoveDown
	stx YPos0		; STore X -> YPos0 
;-----------------------------------------------------------------        
; Move horizontally
        ldx XPos0		; LoaD XPos0 -> X
	lda #%01000000		; LoaD bitmask -> A (Left?)
	bit SWCHA		; BIt Test Target <-> A (logical AND between target and Accum)
	bne SkipMoveLeft	; Branch if Z flag is Not Equal to 1
        cpx #1			; ComPare X -> #1
        bcc SkipMoveLeft	; Branch if Carry Clear
        dex			; DeCrement X
SkipMoveLeft
	lda #%10000000		;Right?
	bit SWCHA 		; BIt Test Target <-> A (logical AND between target and Accum)
	bne SkipMoveRight	; Branch if Z flag is Not Equal to 1
        cpx #153		; ComPare X -> #153
        bcs SkipMoveRight	; Branch if Carry Set
        inx			; INcrememt X
SkipMoveRight
	stx XPos0		; STore X -> XPos0
	rts			; ReTurn from Subroutine
        
;-----------------------------------------------------------------        
; Lookup table data

;-----------------------------------------------------------------        
; Bitmap data "standing" position - Inverted in code
Frame0
	.byte #0
        .byte #%01101100;$F6	Bottom of feet
        .byte #%00101000;$86
        .byte #%00101000;$86
        .byte #%00111000;$86
        .byte #%10111010;$C2
        .byte #%10111010;$C2
        .byte #%01111100;$C2
        .byte #%00111000;$C2
        .byte #%00111000;$16
        .byte #%01000100;$16
        .byte #%01111100;$16
        .byte #%01111100;$18
        .byte #%01010100;$18
        .byte #%01111100;$18
        .byte #%11111110;$F2
        .byte #%00111000;$F4	Top of head

;-----------------------------------------------------------------        
; Color data for each line of sprite - Inverted in code
ColorFrame0
	.byte #$FF;
	.byte #$F6;
	.byte #$86;
	.byte #$86;
	.byte #$86;
	.byte #$C2;
	.byte #$C2;
	.byte #$C2;
	.byte #$C2;
	.byte #$16;
	.byte #$16;
	.byte #$16;
	.byte #$18;
	.byte #$18;
	.byte #$18;
	.byte #$F2;
	.byte #$F4;

;-----------------------------------------------------------------
; Epilogue
        org $fffc		; start at $fffc
        .word Start		; reset vector at $fffc
        .word Start		; interrupt vector at $fffe (unused in VCS)
