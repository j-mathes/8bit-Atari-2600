;-------------------------------------------------------------
; Chapter 26 - Sprite Formations - Online
;-------------------------------------------------------------	

        processor 6502
        
        include "vcs.h"
        include "macro.h"
        include "xmacro.h"	; timer macros
               
;-----------------------------------------------------------------        
; Code SEGment
	seg Code        	; set Code SEGment
        org $f000		; start Code at $f000

;-----------------------------------------------------------------        
; Declare variables

CurRow		equ $8f		; current row counter
				; $8f is the memory locationof variable
NumRows		equ 5		; number of rows
EnemyRows0	equ $80		;
EnemyYpos0	equ $85		;
EnemyXofs0	equ $8a		;

Temp		equ $90		; temp
MissileY0	equ $91		; player missile
MissileY1	equ $92		; alien missile
MissileX0	equ $93		; player missile
BaseX		equ $94		; base x position

ZPRoutine	equ $a0		; addressof ZP Routine
ZPWrites	equ ZPRoutine+(KernelStores-KernelStart)

;-----------------------------------------------------------------        
; Initialize and set initial offsets of objects.
Start	
	CLEAN_START		; macro to safely clear memroy and TIA

;-----------------------------------------------------------------        
; Copy Grid Kernel routine into RAM so we can modify it.
	ldx #KernelEnd-KernelStart-1	; LoaD address of KernelEnd minus
        				; KernelStart - 1 -> X
CopyRoutineLoop
	lda KernelStart,x	; LoaD address of KernelStart, offset X -> A
        sta ZPRoutine,x		; STore address into ZPRoutine, offset X
        dex			; DEcrement X
        bpl CopyRoutineLoop	; Branch if Positive
;-----------------------------------------------------------------        
; Set up interlocuters
        lda #$ff		; address $FF LoaD -> A
        sta EnemyRows0+4	; store $FF into EnemyRows0 + offset
        sta EnemyRows0+3	; store $FF into EnemyRows0 + offset
        sta EnemyRows0+2	; store $FF into EnemyRows0 + offset
        sta EnemyRows0+1	; store $FF into EnemyRows0 + offset
        sta EnemyRows0+0	; store $FF into EnemyRows0 + offset
        lda #190		; row vertical position
        sta EnemyYpos0+4	; store into EnemyYpos0 + offset
        lda #170		; row vertical position
        sta EnemyYpos0+3	; store into EnemyYpos0 + offset
        lda #150		; row vertical position
        sta EnemyYpos0+2	; store into EnemyYpos0 + offset
        lda #130		; row vertical position
        sta EnemyYpos0+1	; store into EnemyYpos0 + offset
        lda #110		; row vertical position
        sta EnemyYpos0+0	; store into EnemyYpos0 + offset
        lda #40
        sta MissileY0		; MissileY0 starting at 40
        lda #50
        sta MissileY1		; MissileY1 starting at 50
        lda #65
        sta BaseX		; Player's X starting at 65
        lda #$df
        sta COLUPF		; use the ball for the player's missile
;-----------------------------------------------------------------        
; Try out the Grid Kernel (not neccessary except for the IDE to get timing)
	ldy #0			; just one line
	jsr KernelStart

;-----------------------------------------------------------------
; Next frame loop
NextFrame

;-----------------------------------------------------------------        
; Vertical Sync - 3 lines
	VERTICAL_SYNC		; macro gives us 3 lines of VSYNC
        
;-----------------------------------------------------------------        
; VBLANK
	TIMER_SETUP 37
        jsr ReadControls	; during top vblank, read controls
        jsr MoveMissiles	; and move the missiles
        TIMER_WAIT
;-----------------------------------------------------------------        
; Main frame
	TIMER_SETUP 192
        jsr DrawEnemyFormation	; during the main frame, draw enemies
        jsr DrawBelowFormation	; draw below enemies
        jsr DrawPlayerBase	; draw player
        lda #$10
        sta COLUBK		; set ground color, just in time!
        lda #0
        sta ENABL
        sta ENAM1		; turn off missile and ball
;-----------------------------------------------------------------        
; Overscan
	TIMER_SETUP 30
        TIMER_WAIT
        lda #0
        sta COLUBK		; clear ground color
;-----------------------------------------------------------------        
; Jump to next frame
        jmp NextFrame

;-----------------------------------------------------------------        
; Draw all lines of the enemy formation.
DrawEnemyFormation
        lda #4			; number of rows (0 = one row, 1 = 2 rows)
        sta CurRow
;-----------------------------------------------------------------        
; We're going to use the timer to wait for the
; scanline to approach the next row of enemies.
; We'll draw any missiles while we're waiting.
WaitForRow
	jsr DrawMissiles
        ldx CurRow		; LoaD Current Row -> X
        lda EnemyYpos0,x	; LoaD Enemy Y position 0 -> A
        cmp INTIM		; Compare enemy Y position with timer
        bcc WaitForRow		; loop if not at the next row so we can draw missiles
;-----------------------------------------------------------------        
; We've reached the right scanline, so we'll
; set up the NUSIZ registers and clear collisions.
        lda #1			; two copies, close for NUSIZ
        sta NUSIZ0		; NUmber SIZe player / missile 0
        sta NUSIZ1		; NUmber SIZe player / missile 1
        sta CXCLR		; clear collisions
;-----------------------------------------------------------------        
; WSYNC and draw the row of sprites.
        sta WSYNC
        jsr DrawFormation	; Draw our enemy formation
;-----------------------------------------------------------------        
; See if any of the player objects collided with ball.
        lda CXP0FB		; Collision between P0 and Field/Ball -> A (1000 0000)
        ora CXP1FB		; logical or Collision between P1 and Field/Ball <-> A (0100 0000)
        and #$c0		; logical and binary 11000000 <-> A - set Zero fl
        beq NoCollision		; Branch if EQual to Zero (no collisions)
;-----------------------------------------------------------------        
; We've got a collision, now we need to see where it is.
; Our grid spacing is 12 pixels, so we need to divide by 12.
; We'll have to account for the X offset of the sprites, too.
	lda MissileX0		; X position of Missile 0
        ldx #$ff		; X Register = (1111 1111)
        sec			; SEt Carry flag = 1
        sbc #13			; SuBtract with Carry A - 13
DivideBy12
	inx			; INcrement X
        sbc #12			; SuBtract with Carry A - 12
        bcs DivideBy12		; Branch if Carry Set
        txa			; Transfer X -> A
;-----------------------------------------------------------------        
; Now we lookup the bitmask to use, and erase the
; bit that corresponds to the enemy.
        tax			; Transfer A -> X - X holds index of collision
        lda PowersOf2,x		; LoaD value Powersof2 at index X -> A
        eor #$ff		; Exclusive OR A <-> (1111 1111)
        			; where A had a 1 there will now be a 0
        ldx CurRow		; LoaD Current Row -> X
        and EnemyRows0,x	; logical AND A <-> EnemyRows0 at index X 
        			; if var and A have the same bit, then result has bit
        sta EnemyRows0,x	; STore A -> var
;-----------------------------------------------------------------        
; Now we destroy the missile too.
        lda #0
        sta MissileY0		; STore 0 in Missile 0 Y coord
NoCollision
        dec CurRow		; DECrement CurRow
        bpl WaitForRow		; Branch if Positive
        lda #0			; turn off two-copy mode
        sta NUSIZ0		; STore 0 -> var
        sta NUSIZ1		; STore 0 -> var
        rts

;-----------------------------------------------------------------        
; Draw a line of the formation.
; First we'll modify the routine in RAM,
; then we'll transfer control to it.
DrawFormation
        ldx CurRow		; LoaD the current row -> X
        lda EnemyRows0,x	; LoaD Enemy Rows at x -> A
        ldx #1			; start at KernelStores+1
ShiftLoop
        ldy #RESP0		; LoaD contents of memory at location Reset Player 0 -> Y
        ror			; ROtate Right
        bcs NoClearEnemy0	; Branch if Carry Set
        ldy #$30		; no-op
NoClearEnemy0
        sty ZPWrites,x		; STore memory at ZPWrites, offset X -> Y
        inx
        inx
        ldy #RESP1		; LoaD Reset Player 1 -> Y
        ror			; ROtate Right
        bcs NoClearEnemy1	; Branch if Carry Set
        ldy #$30		; no-op
NoClearEnemy1
        sty ZPWrites,x		; STore memory at ZPWrites, offset X -> Y
        inx
        inx
        cpx #16			; 8*2 bytes
        bcc ShiftLoop		; Branch if Carry Clear
;-----------------------------------------------------------------        
; Now we jump to our newly-modified kernel in RAM
; to draw the row of sprites.
        ldy EnemyColorFrame0	; get height -> Y
        jsr ZPRoutine		; draw sprites
        rts

;-----------------------------------------------------------------        
; The Grid Kernel, which we'll copy into RAM at the
; start of the program. We'll use the "STA RESPn,x"
; instruction since it takes up 4 cycles, which gives
; us a horizontal spacing of 12 pixels.
KernelStart
KernelLoop
	lda EnemyFrame0,y	; load bitmap
	sta WSYNC		; Wait for horizontal SYNC
        ldx EnemyColorFrame0,y	; load color
        sta GRP0		; GRaphics bitmap Player 0
        sta GRP1		; GRaphics bitmap Player 1
        stx COLUP0		; COlor / Luminance Player 0
        stx COLUP1		; COlor / Luminance Player 1
        ldx #0			; so we can do the STA RESPn,x variant - the value #0 doesn't matter
KernelStores
;-----------------------------------------------------------------        
; These STAs are meant to be modified
        sta RESP0,x		; strobe RESet Player 0 (sta aa,x used - exactly 4 cycles apart)
        sta RESP1,x		; strobe RESet Player 1
        sta RESP0,x		; strobe RESet Player 0
        sta RESP1,x		; strobe RESet Player 1
        sta RESP0,x		; strobe RESet Player 0
        sta RESP1,x		; strobe RESet Player 1
        sta RESP0,x		; strobe RESet Player 0
        sta RESP1,x		; strobe RESet Player 1
;-----------------------------------------------------------------        
; End of modifiable section
        dey			; also acts as 2-cycle delay
        stx.w GRP0		; clear player 0 bitmap (4-cycle version)
        sta RESP0		; reset player 0 position
        stx GRP1		; clear player 1 bitmap
        sta RESP1		; reset player 1 position
        bpl KernelLoop		; repeat until Y < 0
        rts
KernelEnd

;-----------------------------------------------------------------        
; Draw the empty space in between interlocuters
; and the base, which consists of missiles.
DrawBelowFormation
	lda #$FF		; set missile colors
        sta COLUP0
        sta COLUP1
        jsr DrawMissiles
	lda INTIM		; LoaD internal timer output -> A
        cmp #17			; CoMPare to 17 - are we close to the bottom?
        bcs DrawBelowFormation	; Branch if Carry Set
        sta WSYNC		; exit in a known state
	rts

;-----------------------------------------------------------------        
; Read the timer to see if we should draw either
; or both missiles.
; We do this in constant time by using the carry flag of
; the CMP operation.
DrawMissiles
	lda INTIM		; load timer value
        pha			; PusH Accumulator to stack
        sec			; Set Carry flag
        sbc MissileY0		; Subtract with Carry A - Missile 0 Y pos
        cmp #8			; within 8 lines of missile?
        lda #3			; bit 1 now set
        adc #0			; if carry set, bit 1 cleared
        sta ENABL		; enable/disable ball
	pla			; PuLl from stack to Accumulator
        sec			; SEt Carry flag
        sbc MissileY1		; SuBtract with Carry A - Missile 1 Y pos
        cmp #8			; within 8 lines of missile?
        lda #3			; bit 1 now set
        adc #0			; if carry set, bit 1 cleared
        sta ENAM1		; enable/disable missile
        rts

;-----------------------------------------------------------------        
; Draw the player's base
DrawPlayerBase
	lda BaseX		; LoaD player X pos -> A
        ldx #0
        jsr SetHorizPos		; first set the horizontal position
	ldy ColorFrame0		; get sprite height
DrawBaseLoop
	lda Frame0,y		; LoaD Frame0 at Y offset -> A
        ldx ColorFrame0,y	; LoaD Colorframe 0 at Y offset -> Y
        sta WSYNC		; Wait for horizontal SYNC
        sta GRP0		; STore A -> GRaphics bitmap Player 0
        stx COLUP0		; STore X -> COlor LUmanance Player 0
        dey			; DEcrement Y
        bpl DrawBaseLoop 	; repeat until Y < 0
        rts

;-----------------------------------------------------------------        
; Move missiles
; Missile 0 (player) moves up, missile 1 (alien) moves down.
MoveMissiles
	lda MissileY0		; LoaD Missile 0 Y pos -> A
        beq NoMoveMiss0		; Branch if EQual
        inc MissileY0		; INCrement Missile 0 Y pos
NoMoveMiss0
	lda MissileY1		; LoaD Missile 1 Y pos -> A
        beq NoMoveMiss1		; Branch if EQual
        dec MissileY1		; DECrement Missile 1 Y pos
NoMoveMiss1
	rts

;-----------------------------------------------------------------        
; Move player and shoot missiles with joystick/button
ReadControls
	ldx BaseX		; player X position
	bit SWCHA		; read joystick
        bvs NoMoveLeft		; bit 7 set? - Branch if oVerflow Set
        			; if yes, we're moving right
;-----------------------------------------------------------------  
; continue here if we are moving left
        lda #%0
        sta REFP0		; reset sprite flip
        dex			; DECrement X
        bne NoMoveRight
NoMoveLeft
	bmi NoMoveRight		; bit 6 set? - Branch if MInus set
        			; if yes, we're moving left (we've actually
                                ; already moved left above, so skip over move
                                ; right branch)
;-----------------------------------------------------------------  
; continue here if we are moving right
        lda #%1000
        sta REFP0		; set sprite flip
	inx			; increment X position of player
        bmi NoStoreX		; if minus set, we don't store X position
NoMoveRight
	stx BaseX		; STore X -> Base's X position
NoStoreX
;-----------------------------------------------------------------        
; Shoot a missile when fire button pressed
	bit INPT4		; read button
        bmi NoFireButton 	; bit 7 set?  If not, branch
        lda #10			; add this amount to the player's Y position for missile's starting Y
        sta MissileY0		; reset missile's Y position
        lda BaseX		; Load the player's X position
        clc			; CLear Carry flag
        adc #5			; add this amount to the player's X position for missile X position
        sta MissileX0		; STore A -> Missile 0's X position
        ldx #4			; LoaD 4 -> X
        jsr SetHorizPos		; set ball X pos to player's X
NoFireButton
	rts			; ReTurn from Subroutine

;-----------------------------------------------------------------        
; Set horizontal position of object
SetHorizPos
        sta HMCLR		; Strobe Horizontal Movement CLeaR
        sta WSYNC       	; start a new line
        sec            		; set carry flag
DivideLoop
        sbc #15         	; subtract 15
        bcs DivideLoop  	; branch until negative
        eor #7          	; calculate fine offset
        asl			; Arithmetic Shift Left
        asl
        asl
        asl
        sta HMP0,x      	; set fine offset
        sta RESP0,x     	; fix coarse position
        sta WSYNC		; Wait for Horizontal SYNC
        sta HMOVE		; Strobe Horizontal MOVE
        rts             	; return to caller 

;-----------------------------------------------------------------        
; Make sure the bitmap tables used by the Grid Kernel
; do not cross page boundaries, because if so the CPU will
; add an extra cycle and mess up our timing!
	org $ff00		; start at $ff00

;-----------------------------------------------------------------        
; Enemy graphics bitmap data
EnemyFrame0
	.byte #0
        .byte #%01100110;$AE
        .byte #%00100100;$AE
        .byte #%10111101;$AE
        .byte #%10111101;$AC
        .byte #%11011011;$8E
        .byte #%01111110;$8E
        .byte #%00100100;$98
        .byte #%01000010;$98
EnemyColorFrame0
	.byte #8		; height
        .byte #$AE;
        .byte #$AC;
        .byte #$A8;
        .byte #$AC;
        .byte #$8E;
        .byte #$8E;
        .byte #$98;
        .byte #$94;

;-----------------------------------------------------------------        
; Player graphics bitmap data
Frame0
	.byte #0
        .byte #%11111111;$0E
        .byte #%11111111;$0E
        .byte #%11111111;$0E
        .byte #%11111111;$0E
        .byte #%11111111;$FE
        .byte #%11111111;$FE
        .byte #%11111111;$FE
        .byte #%01111110;$FA
        .byte #%00011000;$FA
        .byte #%00011000;$FA
ColorFrame0
	.byte #10		; height
        .byte #$ca;
        .byte #$ca;
        .byte #$ca;
        .byte #$ca;
        .byte #$ca;
        .byte #$ca;
        .byte #$ca;
        .byte #$cA;
        .byte #$cA;
        .byte #$cA;

PowersOf2
	.byte #$1,#$2,#$4,#$8,#$10,#$20,#$40,#$80

;-----------------------------------------------------------------
; Epilogue
        org $fffc		; start at $fffc
        .word Start		; reset vector at $fffc
        .word Start		; interrupt vector at $fffe (unused in VCS)
